---

- include_tasks: "../../db-rdbms-install-pre/tasks/check_skip_install.yml"

- name: db-rdbms-install | display database software install message
  remote_user: "{{ root_user }}"
  debug:
    msg:
      - 'Oracle RDBMS Software Installation tasks started for Single Instance at {{ansible_date_time.iso8601}}:'


#######################OPatch Releated Starts Here #################################################
# Get current OPatch version, if it is < expected OPatch version
# then take backup of OPatch and replace with new OPatch
# Get and display new OPatch version

- name: db-rdbms-install | Get opatch version 
  remote_user: "{{ root_user }}"
  become: yes
  become_user: "{{ oracle_user }}"
  shell: "cd {{ oracle_home }}/OPatch; ./opatch version | awk '{print $3}' " #" | sed 's/\\.//g' | cut -c1-7 "
  register: get_opatch_version


- set_fact:
    current_opatch_version: "{{ get_opatch_version.stdout }}"
    expected_opatch_version: "{{ oracle_opatch_version }}"


- name: db-rdbms-install | display opatch patch readiness
  ansible.builtin.debug:
   msg: "Current OPatch Version is {{ current_opatch_version }}, minimum required OPatch Version is {{ expected_opatch_version }}."  


- name: db-rdbms-install | creating opatch backup    
  command: mv "{{ oracle_home }}/OPatch" "{{ oracle_home }}/OPatch_BKP_{{ansible_date_time.date}}_{{ansible_date_time.epoch}}"
  when: current_opatch_version  is version(expected_opatch_version, '<') and not skip_install


- name: db-rdbms-install | Patch Oracle OPatch Binaries on the target server
  when: current_opatch_version  is version(expected_opatch_version, '<') and not skip_install
  remote_user: "{{ root_user }}"
  become: yes
  become_user: "{{ oracle_user }}"
  unarchive:
     src={{ stage_dir }}/{{ item }}
     dest="{{ oracle_home }}"
     remote_src=yes
     mode=0775
     group="{{ oracle_install_group }}"
     owner="{{ oracle_user }}"
  with_items:
     - "{{ oracle_opatch_binary }}"     
  tags:
   - db_unpackdbsoftware  

- name: db-rdbms-install | Get new opatch version 
  remote_user: "{{ root_user }}"
  become: yes
  become_user: "{{ oracle_user }}"
  shell: "cd {{ oracle_home }}/OPatch; ./opatch version | awk '{print $3}' " #" | sed 's/\\.//g' | cut -c1-7 "
  register: get_opatch_version
  when: current_opatch_version  is version(expected_opatch_version, '<') and not skip_install

- name: db-rdbms-install | Set new opatch version 
  set_fact:
    current_opatch_version: "{{ get_opatch_version.stdout }}"
  when: current_opatch_version  is version(expected_opatch_version, '<') and not skip_install    

- name: db-rdbms-install | Display new  opatch version
  debug:
    msg: "Current OPatch Version: {{ get_opatch_version.stdout }}"
  when: current_opatch_version  is version(expected_opatch_version, '<') and not skip_install

- name: db-rdbms-install | Stop play if OPatch version is outdated
  fail:
    msg: "Stopping playbook: OPatch version is still outdated ({{ get_opatch_version.stdout }} < {{ expected_opatch_version }})"
  when: current_opatch_version is version(expected_opatch_version, '<')  and not skip_install 

#######################OPatch Releated Ends Here #################################################  


#######################Oracle RDBMS Install Releated Starts Here #################################################

- name: db-rdbms-install | Setup Oracle Database Software silent response file
  when: inventory_hostname in groups['dbservers'] and not skip_install
  remote_user: "{{ root_user }}"
  become: yes
  become_user: "{{ oracle_user }}"
  template: src=roles/db-rdbms-install/templates/{{ oradbsoft_rsp }}.rsp.j2 dest={{ stage_dir }}/{{ oradbsoft_rsp }}.rsp mode=0755
  tags:
   - db_setuprspfile

- name: db-rdbms-install | Check if Oracle already installed using ansible
  stat:
    path: "{{ oracle_installed_flagFile }}"
  register: installed_stat_result
  tags:
   - dbsoft_install


- name: db-rdbms-install | Install Oracle Database Software with RU
  when: install_rdbms and inventory_hostname in groups['dbservers'] and not installed_stat_result.stat.exists and not skip_install
  remote_user: "{{ root_user }}"
  become: yes
  become_user: "{{ oracle_user }}"
  # shell: "export CV_ASSUME_DISTID=OEL7.8 ; {{ oracle_home }}/runInstaller -silent -responseFile {{ stage_dir }}/{{ oradbsoft_rsp }}.rsp -noconfig -applyRU {{ oracle_rdbms_patch_stage_dir }} \ " #" -ignorePrereqFailure"
  shell: "export CV_ASSUME_DISTID=OEL7.8 ; {{ oracle_home }}/runInstaller -silent -responseFile {{ stage_dir }}/{{ oradbsoft_rsp }}.rsp -noconfig -applyRU {{ oracle_rdbms_patch_stage_dir }} \ " #" -ignorePrereqFailure"
  ignore_errors: False
  tags:
   - dbsoft_install

- name: db-rdbms-install | Execute orainstroot.sh
  when: install_rdbms and inventory_hostname in groups['dbservers'] and not installed_stat_result.stat.exists  and not skip_install
  remote_user: "{{ root_user }}"
  shell: "{{ oracle_inventory }}/orainstRoot.sh" 
  ignore_errors: False
  tags:
   - db_exeorainstroot

- name: db-rdbms-install | Execute root.sh
  when: install_rdbms and inventory_hostname in groups['dbservers'] and not installed_stat_result.stat.exists and not skip_install
  remote_user: "{{ root_user }}"
  shell: "{{ oracle_home }}/root.sh -silent"
  ignore_errors: False
  tags:
   - db_exeroot

- name: db-rdbms-install | Check if rdbms feature is enabled or disabled
  become: yes
  become_user: "{{ oracle_user }}"
  shell: |
    set -o pipefail
    export PATH={{ oracle_home }}/bin:${PATH}
    export ORACLE_HOME="{{ oracle_home }}"
    cd $ORACLE_HOME/rdbms/lib/
    ar -tv $ORACLE_HOME/rdbms/lib/libknlopt.a | grep -c {{ item.object }}
  register: check_result
  loop:
  - { key: "oaa", value: "{{ oaa }}", object: "dmwdm.o"  }
  - { key: "olap", value: "{{ olap }}", object: "xsyeolap.o"  }
  - { key: "partitioning", value: "{{ partitioning }}", object: "kkpoban.o"  }
  - { key: "rat", value: "{{ rat }}", object: "kecwr.o"  } 
  when: item.object != "none" and not skip_install
  changed_when: false  # Prevents Ansible from marking this task as "changed"
  failed_when: false  # Prevents failure if grep doesn't find the object
  tags:
   - dbsoft_install

- name: db-rdbms-install | Debug rdbms feature status
  debug:
    msg: >-
      Feature: {{ item.item.key }}, 
      current_status: {{ 'enabled' if item.stdout | int == 1 else 'disabled' }}, 
      requested_status: {{ 'enable' if item.item.value | int == 1 else 'disable' }}
  loop: "{{ check_result.results }}"
  loop_control:
    label: "{{ item.item.key }}"  # Prevents full item dump in output
  when: not skip_install

- name: db-rdbms-install | Enable or disable feature based on desired state
  become: yes
  become_user: "{{ oracle_user }}"
  shell: |
    set -o pipefail
    export PATH={{ oracle_home }}/bin:${PATH}
    export ORACLE_HOME="{{ oracle_home }}"
    cd $ORACLE_HOME/rdbms/lib/
    chopt {{ 'enable' if item.item.value | int == 1 else 'disable' }} {{ item.item.key }}
  loop: "{{ check_result.results }}"
  loop_control:
    label: "{{ item.item.key }}"  # Prevents Ansible from printing full item data    
  when: install_rdbms and "item.stdout | int == 0 and item.item.value | int == 1 or item.stdout | int == 1 and item.item.value | int == 0"   and not skip_install    
  changed_when: true
  register: feature_toggle_result
  no_log: false  # Keep logs minimal  
  tags:
   - dbsoft_install

- name: db-rdbms-install | Check rdbms feature status after required change (if any ) 
  become: yes
  become_user: "{{ oracle_user }}"
  shell: |
    set -o pipefail
    export PATH={{ oracle_home }}/bin:${PATH}
    export ORACLE_HOME="{{ oracle_home }}"
    cd $ORACLE_HOME/rdbms/lib/
    ar -tv $ORACLE_HOME/rdbms/lib/libknlopt.a | grep -c {{ item.object }}
  register: check_result
  loop:
  - { key: "oaa", value: "{{ oaa }}", object: "dmwdm.o"  }
  - { key: "olap", value: "{{ olap }}", object: "xsyeolap.o"  }
  - { key: "partitioning", value: "{{ partitioning }}", object: "kkpoban.o"  }
  - { key: "rat", value: "{{ rat }}", object: "kecwr.o"  } 
  when: item.object != "none" and not skip_install
  changed_when: false  # Prevents Ansible from marking this task as "changed"
  failed_when: false  # Prevents failure if grep doesn't find the object
  tags:
   - dbsoft_install

- name: db-rdbms-install | Debug rdbms feature current status
  debug:
    msg: >-
      Feature: {{ item.item.key }}, 
      current_status: {{ 'enabled' if item.stdout | int == 1 else 'disabled' }}, 
      requested_status: {{ 'enable' if item.item.value | int == 1 else 'disable' }}
  loop: "{{ check_result.results }}"
  loop_control:
    label: "{{ item.item.key }}"  # Prevents full item dump in output
  when: not skip_install  

- name: db-rdbms-install | Create Installation status flag file
  copy:
    content: "COMPLETED"
    dest: "{{ oracle_installed_flagFile }}"
    force: false
    mode: 0444
  when: not skip_install

#######################Oracle RDBMS Install Releated Ends Here #################################################

- name: db-rdbms-install | display post install message
  debug:
    msg:
      - 'Install Single Instance Oracle Database Software tasks completed at {{ansible_date_time.iso8601}}:'

